module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateClasse {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Classe {
  id: ID!
  aules: String!
  durada: Int!
  inici: Int!
  diaSetmana: Int!
}

type ClasseConnection {
  pageInfo: PageInfo!
  edges: [ClasseEdge]!
  aggregate: AggregateClasse!
}

input ClasseCreateInput {
  id: ID
  aules: String!
  durada: Int!
  inici: Int!
  diaSetmana: Int!
}

input ClasseCreateManyInput {
  create: [ClasseCreateInput!]
  connect: [ClasseWhereUniqueInput!]
}

type ClasseEdge {
  node: Classe!
  cursor: String!
}

enum ClasseOrderByInput {
  id_ASC
  id_DESC
  aules_ASC
  aules_DESC
  durada_ASC
  durada_DESC
  inici_ASC
  inici_DESC
  diaSetmana_ASC
  diaSetmana_DESC
}

type ClassePreviousValues {
  id: ID!
  aules: String!
  durada: Int!
  inici: Int!
  diaSetmana: Int!
}

input ClasseScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  aules: String
  aules_not: String
  aules_in: [String!]
  aules_not_in: [String!]
  aules_lt: String
  aules_lte: String
  aules_gt: String
  aules_gte: String
  aules_contains: String
  aules_not_contains: String
  aules_starts_with: String
  aules_not_starts_with: String
  aules_ends_with: String
  aules_not_ends_with: String
  durada: Int
  durada_not: Int
  durada_in: [Int!]
  durada_not_in: [Int!]
  durada_lt: Int
  durada_lte: Int
  durada_gt: Int
  durada_gte: Int
  inici: Int
  inici_not: Int
  inici_in: [Int!]
  inici_not_in: [Int!]
  inici_lt: Int
  inici_lte: Int
  inici_gt: Int
  inici_gte: Int
  diaSetmana: Int
  diaSetmana_not: Int
  diaSetmana_in: [Int!]
  diaSetmana_not_in: [Int!]
  diaSetmana_lt: Int
  diaSetmana_lte: Int
  diaSetmana_gt: Int
  diaSetmana_gte: Int
  AND: [ClasseScalarWhereInput!]
  OR: [ClasseScalarWhereInput!]
  NOT: [ClasseScalarWhereInput!]
}

type ClasseSubscriptionPayload {
  mutation: MutationType!
  node: Classe
  updatedFields: [String!]
  previousValues: ClassePreviousValues
}

input ClasseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ClasseWhereInput
  AND: [ClasseSubscriptionWhereInput!]
}

input ClasseUpdateDataInput {
  aules: String
  durada: Int
  inici: Int
  diaSetmana: Int
}

input ClasseUpdateInput {
  aules: String
  durada: Int
  inici: Int
  diaSetmana: Int
}

input ClasseUpdateManyDataInput {
  aules: String
  durada: Int
  inici: Int
  diaSetmana: Int
}

input ClasseUpdateManyInput {
  create: [ClasseCreateInput!]
  update: [ClasseUpdateWithWhereUniqueNestedInput!]
  upsert: [ClasseUpsertWithWhereUniqueNestedInput!]
  delete: [ClasseWhereUniqueInput!]
  connect: [ClasseWhereUniqueInput!]
  set: [ClasseWhereUniqueInput!]
  disconnect: [ClasseWhereUniqueInput!]
  deleteMany: [ClasseScalarWhereInput!]
  updateMany: [ClasseUpdateManyWithWhereNestedInput!]
}

input ClasseUpdateManyMutationInput {
  aules: String
  durada: Int
  inici: Int
  diaSetmana: Int
}

input ClasseUpdateManyWithWhereNestedInput {
  where: ClasseScalarWhereInput!
  data: ClasseUpdateManyDataInput!
}

input ClasseUpdateWithWhereUniqueNestedInput {
  where: ClasseWhereUniqueInput!
  data: ClasseUpdateDataInput!
}

input ClasseUpsertWithWhereUniqueNestedInput {
  where: ClasseWhereUniqueInput!
  update: ClasseUpdateDataInput!
  create: ClasseCreateInput!
}

input ClasseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  aules: String
  aules_not: String
  aules_in: [String!]
  aules_not_in: [String!]
  aules_lt: String
  aules_lte: String
  aules_gt: String
  aules_gte: String
  aules_contains: String
  aules_not_contains: String
  aules_starts_with: String
  aules_not_starts_with: String
  aules_ends_with: String
  aules_not_ends_with: String
  durada: Int
  durada_not: Int
  durada_in: [Int!]
  durada_not_in: [Int!]
  durada_lt: Int
  durada_lte: Int
  durada_gt: Int
  durada_gte: Int
  inici: Int
  inici_not: Int
  inici_in: [Int!]
  inici_not_in: [Int!]
  inici_lt: Int
  inici_lte: Int
  inici_gt: Int
  inici_gte: Int
  diaSetmana: Int
  diaSetmana_not: Int
  diaSetmana_in: [Int!]
  diaSetmana_not_in: [Int!]
  diaSetmana_lt: Int
  diaSetmana_lte: Int
  diaSetmana_gt: Int
  diaSetmana_gte: Int
  AND: [ClasseWhereInput!]
}

input ClasseWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createClasse(data: ClasseCreateInput!): Classe!
  updateClasse(data: ClasseUpdateInput!, where: ClasseWhereUniqueInput!): Classe
  updateManyClasses(data: ClasseUpdateManyMutationInput!, where: ClasseWhereInput): BatchPayload!
  upsertClasse(where: ClasseWhereUniqueInput!, create: ClasseCreateInput!, update: ClasseUpdateInput!): Classe!
  deleteClasse(where: ClasseWhereUniqueInput!): Classe
  deleteManyClasses(where: ClasseWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  classe(where: ClasseWhereUniqueInput!): Classe
  classes(where: ClasseWhereInput, orderBy: ClasseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Classe]!
  classesConnection(where: ClasseWhereInput, orderBy: ClasseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClasseConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  classe(where: ClasseSubscriptionWhereInput): ClasseSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  createdAt: DateTime!
  name: String!
  email: String!
  objectiu: User
  latitude: String
  longitude: String
  alive: Boolean
  monedes: Int
  winner: Boolean!
  horari(where: ClasseWhereInput, orderBy: ClasseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Classe!]
  rang: Int!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  objectiu: UserCreateOneWithoutObjectiuInput
  latitude: String
  longitude: String
  alive: Boolean
  monedes: Int
  winner: Boolean!
  horari: ClasseCreateManyInput
  rang: Int!
}

input UserCreateOneWithoutObjectiuInput {
  create: UserCreateWithoutObjectiuInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutObjectiuInput {
  id: ID
  name: String!
  email: String!
  latitude: String
  longitude: String
  alive: Boolean
  monedes: Int
  winner: Boolean!
  horari: ClasseCreateManyInput
  rang: Int!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  latitude_ASC
  latitude_DESC
  longitude_ASC
  longitude_DESC
  alive_ASC
  alive_DESC
  monedes_ASC
  monedes_DESC
  winner_ASC
  winner_DESC
  rang_ASC
  rang_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  name: String!
  email: String!
  latitude: String
  longitude: String
  alive: Boolean
  monedes: Int
  winner: Boolean!
  rang: Int!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  objectiu: UserUpdateOneWithoutObjectiuInput
  latitude: String
  longitude: String
  alive: Boolean
  monedes: Int
  winner: Boolean
  horari: ClasseUpdateManyInput
  rang: Int
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  latitude: String
  longitude: String
  alive: Boolean
  monedes: Int
  winner: Boolean
  rang: Int
}

input UserUpdateOneWithoutObjectiuInput {
  create: UserCreateWithoutObjectiuInput
  update: UserUpdateWithoutObjectiuDataInput
  upsert: UserUpsertWithoutObjectiuInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutObjectiuDataInput {
  name: String
  email: String
  latitude: String
  longitude: String
  alive: Boolean
  monedes: Int
  winner: Boolean
  horari: ClasseUpdateManyInput
  rang: Int
}

input UserUpsertWithoutObjectiuInput {
  update: UserUpdateWithoutObjectiuDataInput!
  create: UserCreateWithoutObjectiuInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  objectiu: UserWhereInput
  latitude: String
  latitude_not: String
  latitude_in: [String!]
  latitude_not_in: [String!]
  latitude_lt: String
  latitude_lte: String
  latitude_gt: String
  latitude_gte: String
  latitude_contains: String
  latitude_not_contains: String
  latitude_starts_with: String
  latitude_not_starts_with: String
  latitude_ends_with: String
  latitude_not_ends_with: String
  longitude: String
  longitude_not: String
  longitude_in: [String!]
  longitude_not_in: [String!]
  longitude_lt: String
  longitude_lte: String
  longitude_gt: String
  longitude_gte: String
  longitude_contains: String
  longitude_not_contains: String
  longitude_starts_with: String
  longitude_not_starts_with: String
  longitude_ends_with: String
  longitude_not_ends_with: String
  alive: Boolean
  alive_not: Boolean
  monedes: Int
  monedes_not: Int
  monedes_in: [Int!]
  monedes_not_in: [Int!]
  monedes_lt: Int
  monedes_lte: Int
  monedes_gt: Int
  monedes_gte: Int
  winner: Boolean
  winner_not: Boolean
  horari_some: ClasseWhereInput
  rang: Int
  rang_not: Int
  rang_in: [Int!]
  rang_not_in: [Int!]
  rang_lt: Int
  rang_lte: Int
  rang_gt: Int
  rang_gte: Int
  AND: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    